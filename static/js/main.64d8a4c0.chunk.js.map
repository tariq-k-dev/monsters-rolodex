{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","id","name","email","className","src","alt","CardList","monsters","map","key","SearchBox","placeholder","onChangeHandler","type","onChange","App","useState","setMonsters","filteredMonsters","setFilteredMonsters","searchField","setSearchField","useEffect","a","fetch","usersResponse","json","users","console","log","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAkBeA,G,YAfF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACNC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAElB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BJ,EAA1B,0BACHK,IAAI,YAEN,4BAAKJ,GACL,2BAAIC,MCAKI,EARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAAAT,GAAO,OACnB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,SCIvBW,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,gBAAhB,OAChB,2BACET,UAAU,aACVU,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCCG,G,MA5CH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTT,EADS,KACCU,EADD,OAEgCD,mBAAS,CAACT,IAF1C,mBAETW,EAFS,KAESC,EAFT,OAGsBH,mBAAS,IAH/B,mBAGTI,EAHS,KAGIC,EAHJ,KAgChB,OAvBAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAE+BC,MAC1B,8CAHL,cAESC,EAFT,gBAKuBA,EAAcC,OALrC,OAKSC,EALT,OAMGV,EAAYU,GANf,kDAQGC,QAAQC,IAAI,gDARf,yDAAD,KAWC,IAGHP,qBAAU,WACRH,EACEZ,EAASuB,QAAO,SAAA/B,GAAO,OACrBA,EAAQE,KAAK8B,cAAcC,SAASZ,EAAYW,qBAGnD,CAACxB,EAAUa,IAGZ,yBAAKjB,UAAU,OACb,wBAAIH,GAAG,aAAP,oBACA,kBAAC,EAAD,CACEW,YAAa,kBACbC,gBAjCiB,SAAAqB,GACrBZ,EAAeY,EAAEC,OAAOC,UAkCtB,kBAAC,EAAD,CAAU5B,SAAUW,OChCNkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.64d8a4c0.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = ({ monster }) => {\n  const { id, name, email } = monster;\n\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n        alt=\"monster\"\n      />\n      <h1>{name}</h1>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './card-list.styles.css';\n\nimport Card from '../card/card.component';\n\nconst CardList = ({ monsters }) => (\n  <div className=\"card-list\">\n    {monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from 'react';\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder, onChangeHandler }) => (\n  <input\n    className=\"search-box\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={onChangeHandler}\n  />\n);\n\nexport default SearchBox;\n","import React, { useState, useEffect } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.styles.css';\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [filteredMonsters, setFilteredMonsters] = useState([monsters]);\n  const [searchField, setSearchField] = useState('');\n  const onSearchChange = e => {\n    setSearchField(e.target.value);\n  };\n\n  // Get initial list of monsters, and only update if monsters changes\n  useEffect(() => {\n    (async () => {\n      try {\n        const usersResponse = await fetch(\n          'https://jsonplaceholder.typicode.com/users'\n        );\n        const users = await usersResponse.json();\n        setMonsters(users);\n      } catch (error) {\n        console.log('There was error in the API call ðŸ˜‚');\n      }\n    })();\n  }, []);\n\n  // Update filtered monsters list based on search input changes\n  useEffect(() => {\n    setFilteredMonsters(\n      monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    );\n  }, [monsters, searchField]);\n\n  return (\n    <div className=\"app\">\n      <h1 id=\"app-title\">Monsters Rolodex</h1>\n      <SearchBox\n        placeholder={'Search monsters'}\n        onChangeHandler={onSearchChange}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}